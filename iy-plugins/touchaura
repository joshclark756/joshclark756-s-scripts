local Plugin = {
	["PluginName"] = "TouchInterestAura",
	["PluginDescription"] = "Creates an aura that automatically fires TouchInterest events for nearby parts, with separate enable and disable commands and customizable size",
	["Commands"] = {
		["touchaura"] = {
			["ListName"] = "touchaura",
			["Description"] = "Enable the touch interest aura with optional size parameter",
			["Aliases"] = {"eta", "enabletaura"},
			["Function"] = function(args, speaker)
				local player = game.Players.LocalPlayer
				local character = player.Character or player.CharacterAdded:Wait()
				local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
				
				if _G.auraEnabled then
					print("Touch interest aura is already enabled")
					return
				end
				
				_G.auraEnabled = true
				_G.auraSize = tonumber(args[1]) or 10 -- Use the provided size or default to 10
				
				local function fireTouch(part)
					if part:IsA("BasePart") and part:FindFirstChildOfClass("TouchTransmitter") then
						firetouchinterest(humanoidRootPart, part, 0)
						task.wait()
						firetouchinterest(humanoidRootPart, part, 1)
					end
				end
				
				local function checkNearbyParts()
					while _G.auraEnabled do
						local nearbyParts = workspace:GetPartBoundsInRadius(humanoidRootPart.Position, _G.auraSize)
						for _, part in ipairs(nearbyParts) do
							fireTouch(part)
						end
						task.wait(0.1) -- Adjust this value to change how often the aura checks for parts
					end
				end
				
				task.spawn(checkNearbyParts)
				print("Touch interest aura enabled with size: " .. _G.auraSize)
			end,
		},
		["untouchaura"] = {
			["ListName"] = "untouchaura",
			["Description"] = "Disable the touch interest aura",
			["Aliases"] = {"dta", "disabletaura"},
			["Function"] = function(args, speaker)
				if not _G.auraEnabled then
					print("Touch interest aura is already disabled")
					return
				end
				
				_G.auraEnabled = false
				print("Touch interest aura disabled")
			end,
		},
	},
}

return Plugin
  
